#!/usr/bin/python
#
import os, sys, subprocess, bs4,signal
from time import sleep
import os as sistema
import core
import readline, rlcompleter
from urllib2 import quote
from socket import timeout
from urllib2 import urlopen
from urllib2 import Request
import readline, rlcompleter
from sys import argv
from commands import *
import _py_
from core import help

R = '\033[31m' # Red
N = '\033[1;37m' # White
G = '\033[32m' # Green
O = '\033[0;33m' # Orange
B = '\033[1;34m' #Blue
E = '\033[0m' # End
def clean():
    os.system("clear")


def xss():
    while True:
        cs = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war "+N+"): ")
        if cs == 'show options':
            help.option()
            xss()
        elif cs == 'set target':
            tops = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war (set target)"+N+"): ")
            print "target =>"+R+"" ,tops
            gay = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war"+N+"): ")
            if gay == "run":
                print ""+B+"[*]"+N+" Starting attacks Scanning..."
                os.system("cd modules;cd xsspy;python XssPy.py -u %s -v" % (tops))
                print ""+B+"[*]"+N+" Job finished!"
                print
                xss()
            else:
                xss()
        elif cs =='back':
            core.menu.scan()
        elif cs =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif cs =='clear':
            clean()
            xss()
        else:
            print "Wrong Command => ", cs
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            xss()
        pass

def wordpress():
    while True:
        wor = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/usr_pro_wordpress_auto_find"+N+"): ")
        if wor == 'show options':
            print "Name                  Description"
            print "=====                ============="
            print "set target           start target"
            print "back                 back to menu"
            wordpress()
        elif wor == 'back':
            core.menu.scan()
        elif wor == 'set target':
             def tracker(keywords, start):
                     searchQuery = quote(keywords, safe='')  # This line makes the script Support all encodings
                     try:
                         url = "https://www.google.com/search?gl=ir&num=100&start=" + str(
                             start) + "&pws=0&as_qdr=all&dcr=0&q=" + searchQuery
                         req = Request(url)  # Sets the SERPs URL!!
                     except timeout:
                         print("Connection timed out!")
                     req.add_header('User-Agent',
                                    'userpro1 aef by orm')
                     serpURL = urlopen(req).read()  # Opens and Reads The Serp Page
                     soup = bs4.BeautifulSoup(serpURL, "html.parser")  # Sets the Serp URL On Soup
                     allResults = []  # An Empty Array to Save the Results
                     i=0
                     for hit in soup.findAll('cite'):  # a for-each loop, to check all <cite ....> Elements in Page
                           # if the domain was between <cite> and </cite>
                         allResults.append(
                               str("")+hit.text)  # Results will add to allResults
                         i=i+1
                     if (len(allResults) == 0):
                         return(""+R+"[!] "+N+"No result found for this keyword => " + keywords)
                     else:
                         print(""+B+"[*]"+N+" Ok! Starting... \n")

                         for element in allResults:  # Prints all the results
                             if (element.startswith("http://")):
                                 element = element[7:]
                             if (element.startswith("https://")):
                                  element = element[8:]
                             if (element.startswith("www.")):
                                 element = element[4:]
                             element=element[:element.find("/")]
                             element="http://"+element
                             print("checking "+element+" :")
                             if (checkwp(element)):
                                 suc = str(checkVul(element))
                                 if( suc=="True"):
                                     try:
                                         filee = open("priv8.txt", mode="a+")
                                         filee.write(element+"\n")
                                         filee.close()
                                     except:
                                         print(""+R+"error"+N+"")
                                     print (suc)
                                 else:
                                     print (""+R+"False"+N+"")

                             else:
                                print (element + ""+R+" =>"+N+" " + str(checkwp(element)))


             def checkwp(url):
                 url+="/wp-content/plugins/userpro/css/userpro.min.css"
                 try:
                  pURL = urlopen(url).read()
                 except:
                     return False
                 if (pURL.find(".userpro")>-1):
                     print (""+B+"[!] "+N+" Plugin is installed checking vulnerable...\n")
                     return True
                 else:
                     return False
             def checkVul(url):
                 url1=url + "/?up_auto_log=true"
                 try:
                     pURL = urlopen(url1).read()
                     if (pURL.find("admin-bar-css")>-1):
                        return True
                     elif (urlopen(url + "/wp-admin").read().find("admin-bar-css")>-1):
                         return True
                     else :return False
                 except:
                     return False
             while(True):
                 x = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/usr_pro_wordpress_auto_find (set Dork)"+N+"): ")
                 time.sleep(1)
                 print "DORKS => "+R+"",x
                 n= raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/usr_pro_wordpress_auto_find (start number)"+N+"): ")
                 print "START NUMBER => "+R+"",n
                 g= raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/usr_pro_wordpress_auto_find (set end_number)"+N+"): ")
                 print "END NUMBER => "+R+"",g
                 run = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/usr_pro_wordpress_auto_find"+N+"): ")
                 if run == "run":
                    print ""+B+"[*] "+N+"Starting attacks..."
                 while(True):
                     tracker(x, n)
                     y=raw_input(""+B+"[*]"+N+" Next (y/n)?")
                     if(y=="y"):
                         n+=g;
                         tracker(x, n)
                     else:
                         core.menu.scan()
                 y1=raw_input(""+B+"[*]"+N+" Anouther dork (y/n) ?")
                 if (y1 == "y"):
                     continue
                 else:
                     core.menu.scan()
        elif wor == 'clear':
            clean()
            wordpress()
        elif wor =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        else:
            print "Wrong Command => ", wor
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            wordpress()
        pass

def cms():
    while True:
        cs = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war "+N+"): ")
        if cs == 'show options':
            help.option()
            cms()
        elif cs =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif cs == 'set target':
            tops = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war (set target)"+N+"): ")
            print "target =>"+R+"" ,tops
            print ""+N+"=> "+R+"scan "+N+"[dir, shell, backup, files, admin]"
            ray = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war (scan)"+N+"): ")
            gay = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war"+N+"): ")
            if gay == "run":
                print ""+B+"[*]"+N+" Starting attacks..."
                os.system("cd modules;cd scanner;python scanner.py %s -m %s" % (tops,ray))
                print ""+B+"[*]"+N+" Job finished!"
                print
                cms()
            else:
                cms()
        elif cs =='back':
            core.menu.scan()
        elif cs =='clear':
            clean()
            cms()
        else:
            print "Wrong Command => ", cs
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            cms()
        pass

def wordpress_scan():
    while True:
        sec = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/wordpress_user_scanners"+N+"): ")
        if sec == 'show options':
            help.option()
            wordpress_scan()
        elif sec =='back':
            core.menu.scan()
        elif sec =='set target':
            wop = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/wordpress_user_scanners (target)"+N+"): ")
            enum = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/wordpress_user_scanners (user)"+N+"): ")
            uiop = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/wordpress_user_scanners"+N+"): ")
            if uiop == "run":
                print ""+B+"[*]"+N+" Starting attacks..."
                os.system("cd modules;cd wscan;python wpscanner.py -s %s -n %s" % (wop,enum))
                print ""+B+"[*]"+N+" Job finished!"
                print
                wordpress_scan()
            else:
                wordpress_scan()
        elif sec == 'clear':
            clean()
            wordpress_scan()
        elif sec =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        else:
            print "Wrong Command => ", sec
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            wordpress_scan()
        pass

def dirse():
    while True:
        dir = raw_input("Pentest>> ("+B+"modules/scanners)("+R+"scanner/dir_search"+N+"): ")
        if dir == 'show options':
           help.option()
           dirse()
        elif dir =='back':
            core.menu.scan()
        elif dir =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif dir == 'set target':
            ym = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/dir_search (set target)"+N+"): ")
            print "target => "+R+"",ym
            puki = raw_input("Pentest>> ("+B+"modules/scanners)("+R+"scanner/dir_search (set extensions)"+N+"): ")
            dih = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/dir_search"+N+"): ")
            if dih == "run":
                os.system("python mpdules/dirsearch/dirsearch.py -u %s -e %s" % (ym,puki))
                print ""+B+"[*]"+N+" Job finished!"
                print
                dirse()
            else:
                dirse()
        elif dir =='clear':
            clean()
            dirse()
        else:
            print "Wrong Command => ", dir
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            dirse()
        pass

def lfi():
    while True:
        lf = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/lfi_scanner"+N+"): ")
        if lf == 'show options':
           help.option()
           lfi()
        elif lf =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif lf == 'back':
             core.menu.scan()
        elif lf == 'set target':
            yu = raw_input(""+N+"(Pentest)> ("+B+"modules/scanners)("+R+"scanner/lfi_scanners (set target)"+N+"): ")
            print ""+B+"[*] "+N+"Starting attacks..."
            os.system("cd modules;cd lfi_scanners;perl lfi_scanner.pl")
            print ""+B+"[*]"+N+" Job finished!"
            print
            lfi()
        elif lf == 'clear':
            clean()
            lfi()
        else:
            print "Wrong Command => ", lf
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            lfi()

        pass
def port():
    while True:
        os.system("python modules/port_scanners/port.py")
        print ""+B+"[*]"+N+" Job finished!"
        print
        core.menu.scan()
        pass

def joomla_sql():
    while True:
        jo = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_sqli_scanners"+N+"): ")
        if jo == 'show options':
            help.option()
            joomla_sql()
        elif jo == 'back':
            core.menu.scan()
        elif jo == 'set target':
            q = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_sqli_scanners (set target)"+N+"): ")
            print "list web => "+R+"",q
            m = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_sqli_scanners"+N+"): ")
            if m == "run":
                print ""+B+"[*] "+N+"Starting attacks..."
                os.system("cd modules;cd joomla_sqli_scanners;python joomsql.py %s" % (q))
                print
                joomla_sql()
            else:
                joomla_sql()
        elif jo == 'clear':
            clean()
            joomla_sql()
        elif jo =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        else:
            print "Wrong Command => ", jo
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            joomla_sql()
        pass

def joomscan():
    while True:
        jaa = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/jomscan_v4"+N+"): ")
        if jaa == 'show options':
            help.option()
            joomscan()
        elif jaa =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif jaa == 'back':
            core.menu.scan()
        elif jaa == 'set target':
            ops = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/jomscan_v4 (target)"+N+"): ")
            print "target => "+R+"",ops
            rup = raw_input(""+N+"(Pentest)> ("+B+"modules/scanners)("+R+"scanner/jomscan_v4"+N+"): ")
            if rup == "run":
                print ""+B+"[*]"+N+" Starting Attacks..."
                os.system("cd modules;cd joomscan_v4;python scan.py %s" % (ops))
                print ""+B+"[*]"+N+" Job finished!"
                print
                joomscan()
            else:
                joomscan()
        elif jaa =='clear':
            clean()
            joomscan()
        else:
            print "Wrong Command => ", jaa
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            joomscan()
        pass

def scan_v3():
    while True:
        se =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"joomla_scanners_v3"+N+"): ")
        if se == 'show options':
            help.option()
            scan_v3()
        elif se =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif se == 'back':
            core.menu.scan()
        elif se == 'set target':
            x = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_scanners_v3 (set target)"+N+"): ")
            print "target => "+R+"",x
            i = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"joomla_scanners_v3"+N+"): ")
            if i == "run":
                time.sleep(2)
                print ""+B+"[*]"+N+" Starting attacks..."
                os.system("cd modules;cd joomscan_v3;python joomlascanner.py %s" % (x))
                print ""+B+"[*]"+N+" Job finished!"
                print
                scan_v3()
            else:
                scan_v3()
        elif se =='clear':
            clean()
            scan_v3()
        else:
            print "Wrong Command => ", se
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            scan_v3()
        pass

def scan_v2():
    while True:
        v2 =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_scanners_v.2"+N+"): ")
        if v2 == 'show options':
            help.option()
            scan_v2()
        elif v2 =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif v2 == 'back':
            core.menu.scan()
        elif v2 == 'set target':
            p = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_scanners_v.2 (set target)"+N+"): ")
            print "target => "+R+"",p
            o = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_scanners_v.2"+N+"): ")
            if o == "run":
                os.system("cd modules;cd joomscan_v2;python joomlascan2.py %s" % (p))
                print ""+B+"[*]"+N+" Job finished!"
                print
                scan_v2()
            else:
                scan_v2()
        elif v2 =='clear':
            clean()
            scan_v2()
        else:
            print "Wrong Command => ", v2
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            scan_v2()
        pass

def jomvull():
    while True:
        j = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_vulnerability_scanners"+N+"): ")
        if j == 'show options':
            print "run                   START Attacks"
            jomvull()
        elif dos =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif j == 'back':
            core.menu.scan()
        elif j == 'run':
            os.system("cd modules;cd joomscan;perl joomlavulnerability.pl")
            print ""+B+"[*]"+N+" Job finished!"
            print
            jomvull()
        elif j =='clear':
            clean()
            jomvull()
        else:
            print "Wrong Command => ", j
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            jomvull()
        pass

def jdown():
    while True:
        a = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/jdownloads_scanners"+N+"): ")
        if a == 'show options':
            help.option()
            jdown()
        elif a =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif a == 'back':
            core.menu.scan()
        elif a == 'set target':
            li = raw_input(""+N+"(list)> ("+B+"modules/scanners)("+R+"scanner/jdownloads_scanners (set target)"+N+"): ")
            print "list => "+R+"",li
            ruu = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/jdownloads_scanners"+N+"): ")
            if ruu == "run":
                print ""+B+"[*]"+N+" Starting attacks..."
                os.system("cd modules;cd jdownloads_scanner;perl jdownloads_scanner.pl %s" % (li))
                print ""+B+"[*]"+N+" Job finished!"
                print
                jdown()
            else:
                jdown()
        elif a == 'clear':
            clean()
            jdown()
        else:
            print "Wrong Command => ", a
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            jdown()
        pass

def smb():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/smb_scanning"+N+"): ")
        if map == 'show options':
            help.option()
            smb()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
            target = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/smb_scanning ("+G+"set target)"+N+"): ")
            print "Target => "+R+"",target
            ta = raw_input("Pentest>> ("+B+"modules/scanners)("+R+"scanner/smb_scanning"+N+"): ")
            if ta  == "run":
              os.system("nmap -v 445 --script=smb-check-vulns --script-args=unsafe=1 %s" % (target))
              smb()
            else:
                smb()
        elif map =='clear':
            clean()
            smb()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            smb()
        pass

def nmap_sc():
    while True:
        nnn = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/nmap_scanner"+N+"): ")
        if nnn == 'show options':
            help.option()
            nmap_sc()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif nnn == 'back':
            core.menu.scan()
        elif nnn =='set target':
             target = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/nmap_scanner (set ip)"+N+"): ")
             print "Target => "+R+"",target
             ta = raw_input("Pentest)> ("+B+"modules/scanners)("+R+"scanner/nmap_scanner"+N+"): ")
             if ta  == "run":
               os.system("nmap %s" % (target))
               nmap_sc()
             else:
                 nmap_sc()
        elif nnn =='clear':
            clean()
            nmap_sc()
        else:
            print "Wrong Command => ", nnn
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            nmap_sc()
        pass

def nmap_vul():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/nmap_scanner"+N+"): ")
        if map == 'show options':
            help.option()
            nmap_vul()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
            target = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/nmap_scanner (set IP)"+N+"): ")
            print "Target => "+R+"",target
            ta = raw_input("Pentest>> ("+B+"modules/scanners)("+R+"scanner/nmap_scanner"+N+"): ")
            if ta  == "run":
              os.system("nmap -sV --script vuln %s" % (target))
              nmap_vul()
            else:
                nmap_vul()
        elif map =='clear':
            clean()
            nmap_vul()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            nmap_vul()
        pass

def spaghetti():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/spaghetti"+N+"): ")
        if map == 'show options':
            help.option()
            spaghetti()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
            target = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/spaghetti ("+G+"set target)"+N+"): ")
            print "Target => "+R+"",target
            ta = raw_input("Pentest>> ("+B+"modules/scanners)("+R+"scanner/spaghetti"+N+"): ")
            if ta  == "run":
              os.system("python modules/spaghetti/spaghetti.py --url %s --scan [0-3] " % (target))
              spaghetti()
            else:
                spaghetti()
        elif map =='clear':
            clean()
            spaghetti()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            spaghetti()
        pass

def ssl():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/ssl_scanning"+N+"): ")
        if map == 'show options':
            help.option()
            ssl()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
            target = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/ssl_scanning ("+G+"set target)"+N+"): ")
            print "Target => "+R+"",target
            ta = raw_input("Pentest>> ("+B+"modules/scanners)("+R+"scanner/ssl_scanning"+N+"): ")
            if ta  == "run":
              os.system("python modules/a2sv/a2sv.py -t %s" % (target))
              ssl()
            else:
                ssl()
        elif map =='clear':
            clean()
            ssl()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            ssl()
        pass

def dnslok():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/dnslookup"+N+"): ")
        if map == 'show options':
            help.option()
            dnslok()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
            _py_.explore.dnslookup().run()
            print
            dnslok()
        elif map =='clear':
            clean()
            dnslok()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            dnslok()
        pass

def domain_map():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/domain_map"+N+"): ")
        if map == 'show options':
            help.help.option()
            domain_map()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
             _py_.explore.domain_map().run()
             print
             domain_map()
        elif map =='clear':
            clean()
            domain_map()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            domain_map()
        pass

def dns_report():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/dns_report"+N+"): ")
        if map == 'show options':
            help.option()
            dns_report()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
             _py_.explore.dns_report().run()
             print
             dns_report()
        elif map =='clear':
            clean()
            dns_report()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            dns_report()
        pass

def find_shared_dns():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/find_shared_dns"+N+"): ")
        if map == 'show options':
            help.option()
            find_shared_dns()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
             _py_.explore.find_shared_dns().run()
             print
             find_shared_dns()
        elif map =='clear':
            clean()
            find_shared_dns()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            find_shared_dns()
        pass

def dns_propagation():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/dns_propagation"+N+"): ")
        if map == 'show options':
            help.option()
            dns_propagation()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
             _py_.explore.dns_propagation().run()
             print
             dns_propagation()
        elif map =='clear':
            clean()
            dns_propagation()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            dns_propagation()
        pass

def find_records():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/find_records"+N+"): ")
        if map == 'show options':
            help.option()
            find_records()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
             _py_.explore.find_records().run()
             print
             find_records()
        elif map =='clear':
            clean()
            find_records()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            find_records()
        pass

def cloud_flare():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cloud_flare"+N+"): ")
        if map == 'show options':
            help.option()
            cloud_flare()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
             _py_.explore.cloud_flare().run()
             print
             cloud_flare()
        elif map =='clear':
            clean()
            cloud_flare()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            cloud_flare()
        pass

def extract_links():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/extract_links"+N+"): ")
        if map == 'show options':
            help.option()
            extract_links()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
             _py_.explore.extract_links().run()
             print
             extract_links()
        elif map =='clear':
            clean()
            extract_links()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            cloud_flare()
        pass

def web_robot():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/web_robot"+N+"): ")
        if map == 'show options':
            help.option()
            web_robot()
        elif map =='exit':
             print
             print""+G+"Thanks for using PTF"
             print
             exit()
        elif map == 'back':
            core.menu.scan()
        elif map =='set target':
             _py_.explore.web_robot().run()
             print
             web_robot()
        elif map =='clear':
            clean()
            web_robot()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            web_robot()
def num():
   while True:
       list = raw_input(""+N+"Pentest>> ("+B+"modules/scanner)("+R+"scanner/enumeration"+N+"): ")
       if list == 'show options':
           help.option()
           num()
       elif map =='exit':
            print
            print""+G+"Thanks for using PTF"
            print
            exit()
       elif list == "back":
            core.menu.scan()

       elif list == 'set target':
            go = raw_input(""+N+"Pentest>> ("+B+"modules/scanner)("+R+"scanner/enumeration "+G+"(set target IP/domain)"+N+"): ")
            print
            print '  command                Descriptions '
            print ' ---------             ----------------'
            print " target =>"+R+"",go
            print ' --------------------------------------'
            print ' run                     Start attack'
            print ' back                    back '
            print
            se = raw_input(""+N+"Pentest>> ("+B+"modules/scanner)("+R+"scanner/enumeration "+G+"(set target IP/domain)"+N+"): ")
            if se == "run":
                os.system('python modules/enum/http-enum.py -t %s' % (go))
                num()
            elif se =='back':
                 core.menu.scan()
       elif list == 'clear':
            clean()
            num()
       else:
           print "Wrong Command => ", list
           print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
           num()
